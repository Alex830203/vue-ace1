{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      userCode: \"\",\n      // 使用者帳號綁定的資料屬性\n      userPwd: \"\",\n      // 使用者密碼綁定的資料屬性\n      isLoggedIn: false,\n      //預設登入狀態\n      userToken: \"\",\n      currentTime: this.getCurrentTime()\n    };\n  },\n  mounted() {\n    this.isLoggedIn = localStorage.getItem(\"isLoggedIn\") === \"true\";\n    this.userToken = localStorage.getItem(\"userToken\");\n    this.checkTokenExpiration();\n    console.log(\"登入狀態：\", this.isLoggedIn);\n    console.log(\"Token：\", this.userToken);\n\n    //更新當前時間\n    setInterval(() => {\n      this.currentTime = this.getCurrentTime();\n      this.checkTokenExpiration();\n    }, 1000);\n  },\n  methods: {\n    async login() {\n      try {\n        const response = await axios.post(\"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/AuthLogin\", {\n          userCode: this.userCode,\n          userPwd: this.userPwd\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            accept: \"application/json\"\n          }\n        });\n\n        // 處理 API 回應的邏輯，可能是導航到其他頁面或顯示成功訊息等\n        console.log(\"登入成功！\", response.data.token);\n\n        // 將 token 儲存到 userToken 中\n        this.userToken = response.data.token;\n\n        // 設定 isLoggedIn 為 true\n        this.isLoggedIn = true;\n\n        // 將登入狀態保存到 localStorage\n        localStorage.setItem(\"isLoggedIn\", true);\n\n        // 设置过期时间为半小时后\n        const expirationTime = new Date().getTime() + 30 * 60 * 1000; // 半小时后的时间戳\n        localStorage.setItem(\"tokenExpiration\", expirationTime);\n\n        // 將Token保存到localStorage\n        localStorage.setItem(\"userToken\", this.userToken);\n\n        // 使用 router 的 push 方法導航到其他頁面，並將 token 作為查詢參數傳遞\n        this.$router.push({\n          query: {\n            token: this.userToken\n          }\n        });\n      } catch (error) {\n        // 處理登入失敗的情況，例如顯示錯誤訊息\n        console.error(\"登入失敗：\", error);\n      }\n    },\n    // 检查 token 是否过期\n    checkTokenExpiration() {\n      const expirationTime = localStorage.getItem(\"tokenExpiration\");\n      if (!expirationTime) {\n        // 如果没有过期时间，表示用户未登录或登录已过期\n        this.logout();\n      } else {\n        const currentTime = new Date().getTime();\n        if (currentTime > expirationTime) {\n          // 过期时间小于当前时间，表示 token 已过期\n          this.logout();\n        }\n      }\n    },\n    logout() {\n      // 清空 localStorage 中的登入狀態和Token\n      localStorage.removeItem(\"isLoggedIn\");\n      localStorage.removeItem(\"userToken\");\n      localStorage.removeItem(\"tokenExpiration\");\n\n      // 設定 isLoggedIn 為 false，清空使用者名稱\n      this.isLoggedIn = false;\n\n      // 使用 router 的 push 方法導航回首頁\n      this.$router.push({\n        name: \"home\"\n      });\n    },\n    getCurrentTime() {\n      const now = new Date();\n      const hours = now.getHours().toString().padStart(2, \"0\");\n      const minutes = now.getMinutes().toString().padStart(2, \"0\");\n      const seconds = now.getSeconds().toString().padStart(2, \"0\");\n      return `${hours}:${minutes}:${seconds}`;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","userCode","userPwd","isLoggedIn","userToken","currentTime","getCurrentTime","mounted","localStorage","getItem","checkTokenExpiration","console","log","setInterval","methods","login","response","post","headers","accept","token","setItem","expirationTime","Date","getTime","$router","push","query","error","logout","removeItem","name","now","hours","getHours","toString","padStart","minutes","getMinutes","seconds","getSeconds"],"sources":["C:\\Users\\u0921\\vue-ace1\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"menu\">\n      <div class=\"page\">\n        <router-link to=\"/\" class=\"router\">首頁</router-link>\n        <div v-if=\"isLoggedIn\">\n          <router-link\n            :to=\"{\n              path: '/suspiciousplayer',\n              query: { token: isLoggedIn ? userToken : null },\n            }\"\n            class=\"router\"\n            >可疑玩家</router-link\n          >\n          <router-link\n            :to=\"{ path: '/crossbet', query: { token: isLoggedIn ? userToken : null } }\"\n            class=\"router\"\n            >對投查詢</router-link\n          >\n          <!-- <router-link\n            :to=\"{\n              path: '/currency_conversion',\n              query: { token: isLoggedIn ? userToken : null },\n            }\"\n            class=\"router\"\n            >貨幣換算</router-link\n          > -->\n          <router-link\n            :to=\"{ path: '/playroad', query: { token: isLoggedIn ? userToken : null } }\"\n            class=\"router\"\n            >玩家路書</router-link\n          >\n          <router-link\n            :to=\"{ path: '/api', query: { token: isLoggedIn ? userToken : null } }\"\n            class=\"router\"\n            >API</router-link\n          >\n          <!-- <router-link\n            :to=\"{ path: '/tgbot', query: { token: isLoggedIn ? userToken : null } }\"\n            class=\"router\"\n            >TG BOT</router-link\n          > -->\n        </div>\n      </div>\n\n      <div v-if=\"!isLoggedIn\" class=\"login\">\n        <input v-model=\"userCode\" type=\"text\" placeholder=\"帳號\" class=\"input\" />\n        <input v-model=\"userPwd\" type=\"password\" placeholder=\"密碼\" class=\"input\" />\n        <button @click=\"login\" class=\"button\">登入</button>\n      </div>\n      <div v-if=\"isLoggedIn\" class=\"info\">\n        <H2 style=\"margin-right: 10px; color: #817777\">{{ currentTime }}</H2>\n        <button @click=\"logout\" class=\"button\">登出</button>\n      </div>\n    </div>\n    <div>\n      <router-view></router-view>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      userCode: \"\", // 使用者帳號綁定的資料屬性\n      userPwd: \"\", // 使用者密碼綁定的資料屬性\n      isLoggedIn: false, //預設登入狀態\n      userToken: \"\",\n      currentTime: this.getCurrentTime(),\n    };\n  },\n\n  mounted() {\n    this.isLoggedIn = localStorage.getItem(\"isLoggedIn\") === \"true\";\n    this.userToken = localStorage.getItem(\"userToken\");\n    this.checkTokenExpiration();\n\n    console.log(\"登入狀態：\", this.isLoggedIn);\n    console.log(\"Token：\", this.userToken);\n\n    //更新當前時間\n    setInterval(() => {\n      this.currentTime = this.getCurrentTime();\n      this.checkTokenExpiration();\n    }, 1000);\n  },\n\n  methods: {\n    async login() {\n      try {\n        const response = await axios.post(\n          \"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/AuthLogin\",\n          {\n            userCode: this.userCode,\n            userPwd: this.userPwd,\n          },\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              accept: \"application/json\",\n            },\n          }\n        );\n\n        // 處理 API 回應的邏輯，可能是導航到其他頁面或顯示成功訊息等\n        console.log(\"登入成功！\", response.data.token);\n\n        // 將 token 儲存到 userToken 中\n        this.userToken = response.data.token;\n\n        // 設定 isLoggedIn 為 true\n        this.isLoggedIn = true;\n\n        // 將登入狀態保存到 localStorage\n        localStorage.setItem(\"isLoggedIn\", true);\n\n        // 设置过期时间为半小时后\n        const expirationTime = new Date().getTime() + 30 * 60 * 1000; // 半小时后的时间戳\n        localStorage.setItem(\"tokenExpiration\", expirationTime);\n\n        // 將Token保存到localStorage\n        localStorage.setItem(\"userToken\", this.userToken);\n\n        // 使用 router 的 push 方法導航到其他頁面，並將 token 作為查詢參數傳遞\n        this.$router.push({\n          query: { token: this.userToken },\n        });\n      } catch (error) {\n        // 處理登入失敗的情況，例如顯示錯誤訊息\n        console.error(\"登入失敗：\", error);\n      }\n    },\n\n    // 检查 token 是否过期\n    checkTokenExpiration() {\n      const expirationTime = localStorage.getItem(\"tokenExpiration\");\n      if (!expirationTime) {\n        // 如果没有过期时间，表示用户未登录或登录已过期\n        this.logout();\n      } else {\n        const currentTime = new Date().getTime();\n        if (currentTime > expirationTime) {\n          // 过期时间小于当前时间，表示 token 已过期\n          this.logout();\n        }\n      }\n    },\n\n    logout() {\n      // 清空 localStorage 中的登入狀態和Token\n      localStorage.removeItem(\"isLoggedIn\");\n      localStorage.removeItem(\"userToken\");\n      localStorage.removeItem(\"tokenExpiration\");\n\n      // 設定 isLoggedIn 為 false，清空使用者名稱\n      this.isLoggedIn = false;\n\n      // 使用 router 的 push 方法導航回首頁\n      this.$router.push({ name: \"home\" });\n    },\n    getCurrentTime() {\n      const now = new Date();\n      const hours = now.getHours().toString().padStart(2, \"0\");\n      const minutes = now.getMinutes().toString().padStart(2, \"0\");\n      const seconds = now.getSeconds().toString().padStart(2, \"0\");\n      return `${hours}:${minutes}:${seconds}`;\n    },\n  },\n};\n</script>\n\n<style>\n.menu {\n  padding: 10px;\n  text-align: center;\n  position: fixed;\n  top: 0%;\n  width: 100%;\n  background: linear-gradient(to right, #e4efdc, #aec0c0);\n  z-index: 1000; /* 設定層級，確保選單在其他元素上面 */\n  display: flex;\n  justify-content: space-between; /* 讓內容在 flex 容器中平均分布 */\n  align-items: center; /* 垂直置中 */\n}\n\n.page {\n  display: flex;\n  align-items: center; /* 垂直置中 */\n}\n\n.input {\n  margin-right: 5px;\n  padding: 7px;\n  width: 100px;\n  border-color: #a6c0e8;\n  border-radius: 5px; /* 輸入框的圓角 */\n}\n\n.login {\n  position: fixed;\n  right: 1%;\n}\n\n.info {\n  position: fixed;\n  right: 1%;\n  display: flex;\n  align-items: center; /* 垂直置中 */\n}\n\n.user {\n  margin-right: 10px;\n  font-weight: bold;\n}\n.button {\n  padding: 7px;\n  width: 100px;\n  font-weight: bold;\n  border: none; /* 移除按鈕的邊框 */\n  border-radius: 10px; /* 輸入框的圓角 */\n  background: linear-gradient(to top, #e4efdc, #84c7e3);\n}\n\n.button:hover {\n  background-color: #a6c0e8;\n  color: white;\n  cursor: pointer;\n}\n\n.router {\n  color: #817777;\n  font-weight: bold;\n  font-family: Tahoma, sans-serif;\n  font-size: 20px;\n  margin-right: 40px;\n  text-decoration: none;\n  cursor: pointer;\n  transition: color 0.6s; /* 過渡效果 */\n}\n\n.router:hover {\n  color: #ffffffc2; /* 滑鼠懸停時改變文字顏色為白色 */\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}