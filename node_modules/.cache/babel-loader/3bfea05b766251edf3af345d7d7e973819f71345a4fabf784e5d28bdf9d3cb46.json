{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nimport dataMapping from \"./data.json\";\nexport default {\n  props: {\n    token: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      userCode: \"\",\n      roundCode: \"\",\n      timeFrom: \"\",\n      timeTo: \"\",\n      page: 1,\n      pageSize: 5000,\n      responseData: null,\n      responseData2: null,\n      responseData3: null,\n      organizedData: {},\n      userSessionIp: null,\n      checkBettype: false,\n      checkMoney: false,\n      checkIP: false,\n      checkCurrency: false,\n      checkAgentCode: false,\n      validPairs: [],\n      userSessionIpNoDup: [],\n      betCodeMapping: dataMapping.betCode,\n      gameCodeMapping: dataMapping.gameCode,\n      //匯率表\n      exchangeRates: {},\n      loading: false\n    };\n  },\n  methods: {\n    async submit() {\n      if (!this.userCode) {\n        // 用戶名為空，顯示錯誤信息並中止提交\n        alert(\"用戶名不能為空\");\n        return;\n      }\n      if (!this.timeFrom) {\n        // 時間為空，顯示錯誤信息並中止提交\n        alert(\"時間不能為空\");\n        return;\n      }\n      if (!this.timeTo) {\n        // 時間為空，顯示錯誤信息並中止提交\n        alert(\"時間不能為空\");\n        return;\n      }\n      this.organizedData = {}, this.loading = true;\n      try {\n        //請求匯率表\n        const response3 = await axios.post(\"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/CurrencyList\", {}, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            accept: \"application/json\",\n            Authorization: `Bearer ${this.token}` // 在這裡添加 token 到標頭中\n          }\n        });\n\n        // 將API返回的數據保存在responseData中，以便在模板中顯示\n        this.responseData3 = response3.data.data;\n        console.log(`請求匯率表：`, this.responseData3);\n\n        // 遍歷 responseData3，構建 exchangeRates 對象\n        this.responseData3.forEach(rate => {\n          const currencyCode = rate.currencyCode;\n          const currencyRate = rate.currencyRate;\n\n          // 將 currencyCode 和 currencyRate 添加到 exchangeRates 對象\n          this.exchangeRates[currencyCode] = currencyRate;\n        });\n        console.log(`匯率表：`, this.exchangeRates);\n        const response = await axios.post(\"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/RptBetRec\", {\n          userCode: this.userCode,\n          timeFrom: this.timeFrom + \":00\",\n          timeTo: this.timeTo + \":00\",\n          page: this.page,\n          pageSize: this.pageSize,\n          roundCode: this.roundCode\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            accept: \"application/json\",\n            Authorization: `Bearer ${this.token}` // 在這裡添加 token 到標頭中\n          }\n        });\n\n        // 將API返回的數據保存在responseData中，以便在模板中顯示\n        this.responseData = response.data;\n        console.log(`${this.userCode}的data：`, this.responseData);\n\n        // 過濾重複的 userSessionIp\n        const userSessionIpSet = new Set(response.data.data.map(bet => bet.sessionIp));\n        this.userSessionIpNoDup = Array.from(userSessionIpSet);\n        console.log(\"過濾重複的 userSessionIp : \", this.userSessionIpNoDup);\n\n        // 過濾重複的 roundCode\n        const roundCodeSet = new Set(response.data.data.map(bet => bet.roundCode));\n        const roundCodeNoDup = Array.from(roundCodeSet);\n        console.log(\"過濾重複的 roundCode : \", roundCodeNoDup);\n        console.log(\"Round Codes: \", roundCodeNoDup.join(\",\"));\n        const response2 = await axios.post(\"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/RptBetRec\", {\n          page: this.page,\n          timeFrom: this.timeFrom + \":00\",\n          timeTo: this.timeTo + \":00\",\n          pageSize: this.pageSize,\n          roundCode: roundCodeNoDup.join(\",\") // 使用逗號分隔的字符串\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            accept: \"application/json\",\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n\n        // 处理第二个请求的响应数据\n        this.responseData2 = response2.data;\n        console.log(`${this.userCode}的data：`, this.responseData2);\n\n        // 重新整理的資料\n        this.organizedData = {};\n        this.responseData2.data.forEach(bet => {\n          // 使用 bet 中的 `roundCode` 作为 key\n          const roundCode = bet.roundCode;\n\n          // 检查该 `roundCode` 在 organizedData 中是否已存在，如果不存在则创建一个数组\n          // eslint-disable-next-line no-prototype-builtins\n          if (!this.organizedData.hasOwnProperty(roundCode)) {\n            this.organizedData[roundCode] = [];\n          }\n\n          // 将当前投注记录添加到相应的数组中\n          this.organizedData[roundCode].push({\n            userCode: bet.userCode,\n            betTime: bet.betTime,\n            currencyCode: bet.currencyCode,\n            betAmt: bet.betAmt,\n            betCode: bet.betCode,\n            sessionIp: bet.sessionIp,\n            agentCode: bet.agentCode,\n            gameType: bet.gameType,\n            gameCode: bet.gameCode,\n            ConbetAmt: this.convertCurrency(bet.betAmt, bet.currencyCode)\n          });\n        });\n        this.handleBetTypeCheck();\n        // this.handleMoneyCheck();\n        this.handleIPCheck();\n        this.handleCurrencyCheck();\n        this.handleAgentCodeCheck();\n        console.log(`organizedData：`, this.organizedData);\n        this.loading = false;\n      } catch (error) {\n        // 請求失敗\n        this.loading = false;\n        console.error(\"請求失敗：\", error);\n      }\n    },\n    handleIPCheck() {\n      // 处理IP相同的逻辑\n      if (this.checkIP) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 获取当前局的所有投注记录\n            const bets = this.organizedData[roundCode];\n\n            // 使用一个 Set 来记录每个 IP 对应的 userCode\n            const ipUserCodeSet = new Map();\n\n            // 遍历当前局的所有投注记录\n            bets.forEach(bet => {\n              const ip = bet.sessionIp;\n              const userCode = bet.userCode;\n\n              // 如果 Set 中不存在该 IP 对应的 userCode，则加入 Set\n              if (!ipUserCodeSet.has(ip)) {\n                ipUserCodeSet.set(ip, new Set());\n              }\n              ipUserCodeSet.get(ip).add(userCode);\n            });\n\n            // 筛选出符合条件的投注记录\n            const filteredBets = bets.filter(bet => {\n              const ip = bet.sessionIp;\n              const userCodeSet = ipUserCodeSet.get(ip);\n\n              // 保留同一局有不同userCode的投注记录\n              return userCodeSet.size >= 2 && userCodeSet.has(this.userCode);\n            });\n\n            // 更新当前局的投注记录\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果该 roundCode 的投注记录被完全过滤掉，移除该 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n    handleBetTypeCheck() {\n      // 處理下注類型相反的邏輯\n      if (this.checkBettype) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 獲取當前局的所有投注記錄\n            const bets = this.organizedData[roundCode];\n\n            // 過濾出符合規定的配對組合的投注記錄\n            const filteredBets = bets.filter(currentBet => {\n              const currentBetCode = currentBet.betCode;\n\n              // 檢查是否存在其他玩家的betCode和當前玩家的betCode可以配對\n              return bets.some(otherBet => {\n                const otherBetCode = otherBet.betCode;\n\n                // 檢查是否為符合條件的配對組合，且其他玩家是查询的用户或当前玩家\n                return currentBetCode !== otherBetCode &&\n                // 不是同一個betCode\n                this.isValidBetCodePair(currentBetCode, otherBetCode) && (this.userCode === otherBet.userCode || this.userCode === currentBet.userCode);\n              });\n            });\n\n            // 更新當前局的投注記錄\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果該 roundCode 的投注記錄被完全過濾掉，移除該 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n    handleCurrencyCheck() {\n      // 处理货币相同的逻辑\n      if (this.checkCurrency) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 获取当前局的所有投注记录\n            const bets = this.organizedData[roundCode];\n\n            // 使用一个 Set 来记录每个 currencyCode 对应的 userCode\n            const currencyCodeUserCodeSet = new Map();\n\n            // 遍历当前局的所有投注记录\n            bets.forEach(bet => {\n              const currencyCode = bet.currencyCode;\n              const userCode = bet.userCode;\n\n              // 如果 Set 中不存在该 currencyCode 对应的 userCode，则加入 Set\n              if (!currencyCodeUserCodeSet.has(currencyCode)) {\n                currencyCodeUserCodeSet.set(currencyCode, new Set());\n              }\n              currencyCodeUserCodeSet.get(currencyCode).add(userCode);\n            });\n\n            // 筛选出符合条件的投注记录，仅当查询的用户与其他用户具有相同代理时才进行过滤\n            const filteredBets = bets.filter(bet => {\n              const currencyCode = bet.currencyCode;\n              const userCodeSet = currencyCodeUserCodeSet.get(currencyCode);\n\n              // 保留同一局有查询的用户和其他用户的投注记录\n              return userCodeSet.size >= 2 && userCodeSet.has(this.userCode);\n            });\n\n            // 更新当前局的投注记录\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果该 roundCode 的投注记录被完全过滤掉，移除该 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n    handleAgentCodeCheck() {\n      // 处理代理相同的逻辑\n      if (this.checkAgentCode) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 获取当前局的所有投注记录\n            const bets = this.organizedData[roundCode];\n\n            // 使用一个 Set 来记录每个 agentCode 对应的 userCode\n            const agentCodeUserCodeSet = new Map();\n\n            // 遍历当前局的所有投注记录\n            bets.forEach(bet => {\n              const agentCode = bet.agentCode;\n              const userCode = bet.userCode;\n\n              // 如果 Set 中不存在该 agentCode 对应的 userCode，则加入 Set\n              if (!agentCodeUserCodeSet.has(agentCode)) {\n                agentCodeUserCodeSet.set(agentCode, new Set());\n              }\n              agentCodeUserCodeSet.get(agentCode).add(userCode);\n            });\n\n            // 筛选出符合条件的投注记录，仅当查询的用户与其他用户具有相同代理时才进行过滤\n            const filteredBets = bets.filter(bet => {\n              const agentCode = bet.agentCode;\n              const userCodeSet = agentCodeUserCodeSet.get(agentCode);\n\n              // 保留同一局有查询的用户和其他用户的投注记录\n              return userCodeSet.size >= 2 && userCodeSet.has(this.userCode);\n            });\n\n            // 更新当前局的投注记录\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果该 roundCode 的投注记录被完全过滤掉，移除该 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n    //對投表\n    isValidBetCodePair(betCode1, betCode2) {\n      // 定義有效的BetCode組合\n      this.validPairs = [[\"PLAYER\", \"BANKER\"], [\"PLAYER\", \"SUPER_SIX_BANKER\"], [\"DRAGON\", \"TIGER\"], [\"ODD\", \"EVEN\"], [\"BLACK\", \"RED\"], [\"BIG\", \"SMALL\"], [\"DRAGON\", \"PHOENIX\"], [\"KWOK_23\", \"KWOK_41\"], [\"KWOK_12\", \"KWOK_34\"], [\"BANKER1_MUL\", \"PLAYER1_MUL\"], [\"BANKER1_NOR\", \"PLAYER1_NOR\"], [\"BANKER2_MUL\", \"PLAYER2_MUL\"], [\"BANKER2_NOR\", \"PLAYER2_NOR\"], [\"BANKER3_MUL\", \"PLAYER3_MUL\"], [\"BANKER3_NOR\", \"PLAYER3_NOR\"]\n      // 添加更多的組合...\n      ];\n\n      // 檢查是否為有效的BetCode組合\n      return this.validPairs.some(pair => {\n        return pair[0] === betCode1 && pair[1] === betCode2 || pair[0] === betCode2 && pair[1] === betCode1;\n      });\n    },\n    // 匯率換算\n    convertCurrency(amount, currencyCode) {\n      // 檢查是否有對應的匯率\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.exchangeRates.hasOwnProperty(currencyCode)) {\n        // 使用匯率換算金額\n        return (amount * this.exchangeRates[currencyCode]).toFixed(2);\n      } else {\n        // 如果沒有對應的匯率，返回原始金額\n        return amount;\n      }\n    },\n    // 時間轉換\n    formatTime(time) {\n      const options = {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: false,\n        timeZone: \"Asia/Taipei\"\n      };\n      return new Date(time).toLocaleString(\"zh-TW\", options);\n    },\n    exportCSV() {\n      // 获取 organizedData 中所有的 roundCode\n      const roundCodes = Object.keys(this.organizedData);\n\n      // 创建CSV内容\n      let csvContent = \"牌局號,投注時間,用戶名,貨幣,下注金額,轉換後金額(USD),下注類型,IP,代理\\n\";\n\n      // 遍历 organizedData 中的数据\n      roundCodes.forEach(roundCode => {\n        const roundData = this.organizedData[roundCode];\n        roundData.forEach(bet => {\n          // 添加每一行的数据\n          csvContent += `${roundCode},${bet.betTime},${bet.userCode},${bet.currencyCode},${bet.betAmt},${bet.ConbetAmt},${bet.betCode},${bet.sessionIp},${bet.agentCode}\\n`;\n        });\n      });\n\n      // 创建一个Blob对象，用于下载CSV\n      const blob = new Blob([csvContent], {\n        type: \"text/csv;charset=utf-8;\"\n      });\n\n      // 使用URL.createObjectURL创建URL并生成下载链接\n      const link = document.createElement(\"a\");\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", \"對投查詢.csv\");\n\n        // 立即触发点击以模拟用户操作\n        link.style.visibility = \"hidden\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    },\n    setTimeRange(range) {\n      const now = new Date();\n      switch (range) {\n        case \"today\":\n          this.timeFrom = this.formatDate(new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0));\n          this.timeTo = this.formatDate(new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0));\n          break;\n        case \"yesterday\":\n          // eslint-disable-next-line no-case-declarations\n          const yesterday = new Date(now);\n          yesterday.setDate(now.getDate() - 1);\n          this.timeFrom = this.formatDate(new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 0, 0));\n          this.timeTo = this.formatDate(new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0));\n          break;\n        case \"last3days\":\n          // eslint-disable-next-line no-case-declarations\n          const threeDaysAgo = new Date(now);\n          threeDaysAgo.setDate(now.getDate() - 2); // 最近三天包括今天，所以减2\n          this.timeFrom = this.formatDate(new Date(threeDaysAgo.getFullYear(), threeDaysAgo.getMonth(), threeDaysAgo.getDate(), 0, 0));\n          this.timeTo = this.formatDate(new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0));\n          break;\n        case \"thisWeek\":\n          // eslint-disable-next-line no-case-declarations\n          const thisMonday = new Date(now);\n          thisMonday.setDate(now.getDate() - now.getDay() + (now.getDay() === 0 ? -6 : 1));\n          this.timeFrom = this.formatDate(new Date(thisMonday.getFullYear(), thisMonday.getMonth(), thisMonday.getDate(), 0, 0));\n          this.timeTo = this.formatDate(new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0));\n          break;\n        case \"lastWeek\":\n          // eslint-disable-next-line no-case-declarations\n          const lastMonday = new Date(now);\n          lastMonday.setDate(now.getDate() - now.getDay() - 6);\n          // eslint-disable-next-line no-case-declarations\n          const lastSunday = new Date(now);\n          lastSunday.setDate(now.getDate() - now.getDay());\n          this.timeFrom = this.formatDate(new Date(lastMonday.getFullYear(), lastMonday.getMonth(), lastMonday.getDate(), 0, 0));\n          this.timeTo = this.formatDate(new Date(lastSunday.getFullYear(), lastSunday.getMonth(), lastSunday.getDate() + 1, 0, 0));\n          break;\n        case \"thisMonth\":\n          // eslint-disable-next-line no-case-declarations\n          const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n          this.timeFrom = this.formatDate(new Date(firstDayOfMonth.getFullYear(), firstDayOfMonth.getMonth(), firstDayOfMonth.getDate(), 0, 0));\n          this.timeTo = this.formatDate(new Date(now.getFullYear(), now.getMonth(), new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate() + 1, 0, 0));\n          break;\n      }\n    },\n    // 格式化日期为适合datetime-local的格式\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n      const day = date.getDate().toString().padStart(2, \"0\");\n      const hours = date.getHours().toString().padStart(2, \"0\");\n      const minutes = date.getMinutes().toString().padStart(2, \"0\");\n      return `${year}-${month}-${day}T${hours}:${minutes}`;\n    }\n  }\n};","map":{"version":3,"names":["axios","dataMapping","props","token","type","String","required","data","userCode","roundCode","timeFrom","timeTo","page","pageSize","responseData","responseData2","responseData3","organizedData","userSessionIp","checkBettype","checkMoney","checkIP","checkCurrency","checkAgentCode","validPairs","userSessionIpNoDup","betCodeMapping","betCode","gameCodeMapping","gameCode","exchangeRates","loading","methods","submit","alert","response3","post","headers","accept","Authorization","console","log","forEach","rate","currencyCode","currencyRate","response","userSessionIpSet","Set","map","bet","sessionIp","Array","from","roundCodeSet","roundCodeNoDup","join","response2","hasOwnProperty","push","betTime","betAmt","agentCode","gameType","ConbetAmt","convertCurrency","handleBetTypeCheck","handleIPCheck","handleCurrencyCheck","handleAgentCodeCheck","error","bets","ipUserCodeSet","Map","ip","has","set","get","add","filteredBets","filter","userCodeSet","size","length","currentBet","currentBetCode","some","otherBet","otherBetCode","isValidBetCodePair","currencyCodeUserCodeSet","agentCodeUserCodeSet","betCode1","betCode2","pair","amount","toFixed","formatTime","time","options","year","month","day","hour","minute","second","hour12","timeZone","Date","toLocaleString","exportCSV","roundCodes","Object","keys","csvContent","roundData","blob","Blob","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","setTimeRange","range","now","formatDate","getFullYear","getMonth","getDate","yesterday","setDate","threeDaysAgo","thisMonday","getDay","lastMonday","lastSunday","firstDayOfMonth","date","toString","padStart","hours","getHours","minutes","getMinutes"],"sources":["C:\\Users\\u0921\\vue-ace1\\src\\components\\Crossbetpage.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\n<template>\n  <div style=\"margin-top: 4%\">\n    <label for=\"userCode\" class=\"custom-label\">用戶名：</label>\n    <input type=\"text\" id=\"userCode\" v-model=\"userCode\" class=\"custom-input\" />\n\n    <label for=\"timeFrom\" class=\"custom-label\">開始時間：</label>\n    <input type=\"datetime-local\" id=\"timeFrom\" v-model=\"timeFrom\" class=\"custom-input\" />\n\n    <label for=\"timeTo\" class=\"custom-label\">結束時間：</label>\n    <input type=\"datetime-local\" id=\"timeTo\" v-model=\"timeTo\" class=\"custom-input\" />\n\n    <button class=\"custom-time\" @click=\"setTimeRange('today')\">今日</button>\n    <button class=\"custom-time\" @click=\"setTimeRange('yesterday')\">昨日</button>\n    <button class=\"custom-time\" @click=\"setTimeRange('last3days')\">三日</button>\n    <button class=\"custom-time\" @click=\"setTimeRange('thisWeek')\">本周</button>\n    <button class=\"custom-time\" @click=\"setTimeRange('lastWeek')\">上周</button>\n    <button class=\"custom-time\" @click=\"setTimeRange('thisMonth')\">本月</button>\n\n    <div\n      style=\"\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-top: 1%;\n      \"\n    >\n      <input\n        type=\"checkbox\"\n        id=\"BetTypeCheck\"\n        v-model=\"checkBettype\"\n        class=\"custom-input\"\n        style=\"transform: scale(2); margin-left: 15px\"\n      />\n      <label for=\"BetTypeCheck\" class=\"custom-label\" style=\"margin-right: 30px\"\n        >下注類型相反</label\n      >\n\n      <!-- <input type=\"checkbox\" id=\"MoneyCheck\" v-model=\"checkMoney\" class=\"custom-input\" />\n      <label for=\"MoneyCheck\" class=\"custom-label\">金額相近</label> -->\n\n      <input\n        type=\"checkbox\"\n        id=\"IPCheck\"\n        v-model=\"checkIP\"\n        class=\"custom-input\"\n        style=\"transform: scale(2)\"\n      />\n      <label for=\"IPCheck\" class=\"custom-label\" style=\"margin-right: 30px\">IP相同</label>\n\n      <input\n        type=\"checkbox\"\n        id=\"CurrencyCheck\"\n        v-model=\"checkCurrency\"\n        class=\"custom-input\"\n        style=\"transform: scale(2)\"\n      />\n      <label for=\"CurrencyCheck\" class=\"custom-label\" style=\"margin-right: 30px\"\n        >貨幣相同</label\n      >\n\n      <input\n        type=\"checkbox\"\n        id=\"AgentCodeCheck\"\n        v-model=\"checkAgentCode\"\n        class=\"custom-input\"\n        style=\"transform: scale(2)\"\n      />\n      <label for=\"AgentCodeCheck\" class=\"custom-label\" style=\"margin-right: 30px\"\n        >代理相同</label\n      >\n\n      <button @click=\"submit\" class=\"custom-button\">確定</button>\n      <button\n        @click=\"exportCSV\"\n        class=\"custom-button\"\n        style=\"margin-left: auto; margin-right: 1%\"\n      >\n        導出CSV\n      </button>\n    </div>\n    <div v-if=\"loading\" class=\"loading-spinner\">搜尋中...</div>\n  </div>\n  <div>\n    <table class=\"custom-table\">\n      <thead>\n        <tr>\n          <th style=\"width: 5%\">NO.</th>\n          <th>牌局號 ({{ Object.keys(organizedData).length }})</th>\n          <th>投注時間</th>\n          <th>用戶名</th>\n          <th>貨幣</th>\n          <th>下注金額</th>\n          <th style=\"color: #de7777\">轉換後金額(USD)</th>\n          <th>下注類型</th>\n          <th>IP</th>\n          <th>代理</th>\n          <th>遊戲桌子</th>\n        </tr>\n      </thead>\n      <tbody>\n        <template v-for=\"(bets, roundCode, index) in organizedData\" :key=\"roundCode\">\n          <tr v-for=\"(bet, betIndex) in bets\" :key=\"bet.betId\">\n            <td v-if=\"betIndex === 0\" :rowspan=\"bets.length\">{{ index + 1 }}</td>\n            <td v-if=\"betIndex === 0\" :rowspan=\"bets.length\">{{ roundCode }}</td>\n            <td>{{ formatTime(bet.betTime) }}</td>\n            <td :class=\"{ highlight: bet.userCode === userCode }\">\n              {{ bet.userCode }}\n            </td>\n            <td>{{ bet.currencyCode }}</td>\n            <td>{{ bet.betAmt }}</td>\n            <td style=\"color: #de7777; font-weight: bold\">\n              {{ bet.ConbetAmt }}\n            </td>\n            <td>{{ betCodeMapping[bet.betCode] || bet.betCode }}</td>\n            <td>{{ bet.sessionIp }}</td>\n            <td>{{ bet.agentCode }}</td>\n            <td>{{ gameCodeMapping[bet.gameCode] || bet.gameCode }}</td>\n          </tr>\n        </template>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport dataMapping from \"./data.json\";\n\nexport default {\n  props: {\n    token: {\n      type: String,\n      required: true,\n    },\n  },\n\n  data() {\n    return {\n      userCode: \"\",\n      roundCode: \"\",\n      timeFrom: \"\",\n      timeTo: \"\",\n      page: 1,\n      pageSize: 5000,\n      responseData: null,\n      responseData2: null,\n      responseData3: null,\n      organizedData: {},\n      userSessionIp: null,\n      checkBettype: false,\n      checkMoney: false,\n      checkIP: false,\n      checkCurrency: false,\n      checkAgentCode: false,\n      validPairs: [],\n      userSessionIpNoDup: [],\n      betCodeMapping: dataMapping.betCode,\n      gameCodeMapping: dataMapping.gameCode,\n      //匯率表\n      exchangeRates: {},\n      loading: false,\n    };\n  },\n\n  methods: {\n    async submit() {\n      if (!this.userCode) {\n        // 用戶名為空，顯示錯誤信息並中止提交\n        alert(\"用戶名不能為空\");\n        return;\n      }\n      if (!this.timeFrom) {\n        // 時間為空，顯示錯誤信息並中止提交\n        alert(\"時間不能為空\");\n        return;\n      }\n      if (!this.timeTo) {\n        // 時間為空，顯示錯誤信息並中止提交\n        alert(\"時間不能為空\");\n        return;\n      }\n\n      (this.organizedData = {}), (this.loading = true);\n\n      try {\n        //請求匯率表\n        const response3 = await axios.post(\n          \"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/CurrencyList\",\n          {},\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              accept: \"application/json\",\n              Authorization: `Bearer ${this.token}`, // 在這裡添加 token 到標頭中\n            },\n          }\n        );\n\n        // 將API返回的數據保存在responseData中，以便在模板中顯示\n        this.responseData3 = response3.data.data;\n        console.log(`請求匯率表：`, this.responseData3);\n\n        // 遍歷 responseData3，構建 exchangeRates 對象\n        this.responseData3.forEach((rate) => {\n          const currencyCode = rate.currencyCode;\n          const currencyRate = rate.currencyRate;\n\n          // 將 currencyCode 和 currencyRate 添加到 exchangeRates 對象\n          this.exchangeRates[currencyCode] = currencyRate;\n        });\n        console.log(`匯率表：`, this.exchangeRates);\n\n        const response = await axios.post(\n          \"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/RptBetRec\",\n          {\n            userCode: this.userCode,\n            timeFrom: this.timeFrom + \":00\",\n            timeTo: this.timeTo + \":00\",\n            page: this.page,\n            pageSize: this.pageSize,\n            roundCode: this.roundCode,\n          },\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              accept: \"application/json\",\n              Authorization: `Bearer ${this.token}`, // 在這裡添加 token 到標頭中\n            },\n          }\n        );\n\n        // 將API返回的數據保存在responseData中，以便在模板中顯示\n        this.responseData = response.data;\n        console.log(`${this.userCode}的data：`, this.responseData);\n\n        // 過濾重複的 userSessionIp\n        const userSessionIpSet = new Set(response.data.data.map((bet) => bet.sessionIp));\n        this.userSessionIpNoDup = Array.from(userSessionIpSet);\n        console.log(\"過濾重複的 userSessionIp : \", this.userSessionIpNoDup);\n\n        // 過濾重複的 roundCode\n        const roundCodeSet = new Set(response.data.data.map((bet) => bet.roundCode));\n        const roundCodeNoDup = Array.from(roundCodeSet);\n        console.log(\"過濾重複的 roundCode : \", roundCodeNoDup);\n        console.log(\"Round Codes: \", roundCodeNoDup.join(\",\"));\n\n        const response2 = await axios.post(\n          \"https://nc-ugs-bo.ms16618.com/mgtapipb.MgtApiService/RptBetRec\",\n          {\n            page: this.page,\n            timeFrom: this.timeFrom + \":00\",\n            timeTo: this.timeTo + \":00\",\n            pageSize: this.pageSize,\n            roundCode: roundCodeNoDup.join(\",\"), // 使用逗號分隔的字符串\n          },\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              accept: \"application/json\",\n              Authorization: `Bearer ${this.token}`,\n            },\n          }\n        );\n\n        // 处理第二个请求的响应数据\n        this.responseData2 = response2.data;\n        console.log(`${this.userCode}的data：`, this.responseData2);\n\n        // 重新整理的資料\n        this.organizedData = {};\n\n        this.responseData2.data.forEach((bet) => {\n          // 使用 bet 中的 `roundCode` 作为 key\n          const roundCode = bet.roundCode;\n\n          // 检查该 `roundCode` 在 organizedData 中是否已存在，如果不存在则创建一个数组\n          // eslint-disable-next-line no-prototype-builtins\n          if (!this.organizedData.hasOwnProperty(roundCode)) {\n            this.organizedData[roundCode] = [];\n          }\n\n          // 将当前投注记录添加到相应的数组中\n          this.organizedData[roundCode].push({\n            userCode: bet.userCode,\n            betTime: bet.betTime,\n            currencyCode: bet.currencyCode,\n            betAmt: bet.betAmt,\n            betCode: bet.betCode,\n            sessionIp: bet.sessionIp,\n            agentCode: bet.agentCode,\n            gameType: bet.gameType,\n            gameCode: bet.gameCode,\n            ConbetAmt: this.convertCurrency(bet.betAmt, bet.currencyCode),\n          });\n        });\n\n        this.handleBetTypeCheck();\n        // this.handleMoneyCheck();\n        this.handleIPCheck();\n\n        this.handleCurrencyCheck();\n\n        this.handleAgentCodeCheck();\n\n        console.log(`organizedData：`, this.organizedData);\n\n        this.loading = false;\n      } catch (error) {\n        // 請求失敗\n        this.loading = false;\n        console.error(\"請求失敗：\", error);\n      }\n    },\n\n    handleIPCheck() {\n      // 处理IP相同的逻辑\n      if (this.checkIP) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 获取当前局的所有投注记录\n            const bets = this.organizedData[roundCode];\n\n            // 使用一个 Set 来记录每个 IP 对应的 userCode\n            const ipUserCodeSet = new Map();\n\n            // 遍历当前局的所有投注记录\n            bets.forEach((bet) => {\n              const ip = bet.sessionIp;\n              const userCode = bet.userCode;\n\n              // 如果 Set 中不存在该 IP 对应的 userCode，则加入 Set\n              if (!ipUserCodeSet.has(ip)) {\n                ipUserCodeSet.set(ip, new Set());\n              }\n              ipUserCodeSet.get(ip).add(userCode);\n            });\n\n            // 筛选出符合条件的投注记录\n            const filteredBets = bets.filter((bet) => {\n              const ip = bet.sessionIp;\n              const userCodeSet = ipUserCodeSet.get(ip);\n\n              // 保留同一局有不同userCode的投注记录\n              return userCodeSet.size >= 2 && userCodeSet.has(this.userCode);\n            });\n\n            // 更新当前局的投注记录\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果该 roundCode 的投注记录被完全过滤掉，移除该 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n\n    handleBetTypeCheck() {\n      // 處理下注類型相反的邏輯\n      if (this.checkBettype) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 獲取當前局的所有投注記錄\n            const bets = this.organizedData[roundCode];\n\n            // 過濾出符合規定的配對組合的投注記錄\n            const filteredBets = bets.filter((currentBet) => {\n              const currentBetCode = currentBet.betCode;\n\n              // 檢查是否存在其他玩家的betCode和當前玩家的betCode可以配對\n              return bets.some((otherBet) => {\n                const otherBetCode = otherBet.betCode;\n\n                // 檢查是否為符合條件的配對組合，且其他玩家是查询的用户或当前玩家\n                return (\n                  currentBetCode !== otherBetCode && // 不是同一個betCode\n                  this.isValidBetCodePair(currentBetCode, otherBetCode) &&\n                  (this.userCode === otherBet.userCode ||\n                    this.userCode === currentBet.userCode)\n                );\n              });\n            });\n\n            // 更新當前局的投注記錄\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果該 roundCode 的投注記錄被完全過濾掉，移除該 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n\n    handleCurrencyCheck() {\n      // 处理货币相同的逻辑\n      if (this.checkCurrency) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 获取当前局的所有投注记录\n            const bets = this.organizedData[roundCode];\n\n            // 使用一个 Set 来记录每个 currencyCode 对应的 userCode\n            const currencyCodeUserCodeSet = new Map();\n\n            // 遍历当前局的所有投注记录\n            bets.forEach((bet) => {\n              const currencyCode = bet.currencyCode;\n              const userCode = bet.userCode;\n\n              // 如果 Set 中不存在该 currencyCode 对应的 userCode，则加入 Set\n              if (!currencyCodeUserCodeSet.has(currencyCode)) {\n                currencyCodeUserCodeSet.set(currencyCode, new Set());\n              }\n              currencyCodeUserCodeSet.get(currencyCode).add(userCode);\n            });\n\n            // 筛选出符合条件的投注记录，仅当查询的用户与其他用户具有相同代理时才进行过滤\n            const filteredBets = bets.filter((bet) => {\n              const currencyCode = bet.currencyCode;\n              const userCodeSet = currencyCodeUserCodeSet.get(currencyCode);\n\n              // 保留同一局有查询的用户和其他用户的投注记录\n              return userCodeSet.size >= 2 && userCodeSet.has(this.userCode);\n            });\n\n            // 更新当前局的投注记录\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果该 roundCode 的投注记录被完全过滤掉，移除该 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n\n    handleAgentCodeCheck() {\n      // 处理代理相同的逻辑\n      if (this.checkAgentCode) {\n        for (const roundCode in this.organizedData) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.organizedData.hasOwnProperty(roundCode)) {\n            // 获取当前局的所有投注记录\n            const bets = this.organizedData[roundCode];\n\n            // 使用一个 Set 来记录每个 agentCode 对应的 userCode\n            const agentCodeUserCodeSet = new Map();\n\n            // 遍历当前局的所有投注记录\n            bets.forEach((bet) => {\n              const agentCode = bet.agentCode;\n              const userCode = bet.userCode;\n\n              // 如果 Set 中不存在该 agentCode 对应的 userCode，则加入 Set\n              if (!agentCodeUserCodeSet.has(agentCode)) {\n                agentCodeUserCodeSet.set(agentCode, new Set());\n              }\n              agentCodeUserCodeSet.get(agentCode).add(userCode);\n            });\n\n            // 筛选出符合条件的投注记录，仅当查询的用户与其他用户具有相同代理时才进行过滤\n            const filteredBets = bets.filter((bet) => {\n              const agentCode = bet.agentCode;\n              const userCodeSet = agentCodeUserCodeSet.get(agentCode);\n\n              // 保留同一局有查询的用户和其他用户的投注记录\n              return userCodeSet.size >= 2 && userCodeSet.has(this.userCode);\n            });\n\n            // 更新当前局的投注记录\n            this.organizedData[roundCode] = filteredBets;\n\n            // 如果该 roundCode 的投注记录被完全过滤掉，移除该 roundCode\n            if (filteredBets.length === 0) {\n              delete this.organizedData[roundCode];\n            }\n          }\n        }\n      }\n    },\n\n    //對投表\n    isValidBetCodePair(betCode1, betCode2) {\n      // 定義有效的BetCode組合\n      this.validPairs = [\n        [\"PLAYER\", \"BANKER\"],\n        [\"PLAYER\", \"SUPER_SIX_BANKER\"],\n        [\"DRAGON\", \"TIGER\"],\n        [\"ODD\", \"EVEN\"],\n        [\"BLACK\", \"RED\"],\n        [\"BIG\", \"SMALL\"],\n        [\"DRAGON\", \"PHOENIX\"],\n        [\"KWOK_23\", \"KWOK_41\"],\n        [\"KWOK_12\", \"KWOK_34\"],\n        [\"BANKER1_MUL\", \"PLAYER1_MUL\"],\n        [\"BANKER1_NOR\", \"PLAYER1_NOR\"],\n        [\"BANKER2_MUL\", \"PLAYER2_MUL\"],\n        [\"BANKER2_NOR\", \"PLAYER2_NOR\"],\n        [\"BANKER3_MUL\", \"PLAYER3_MUL\"],\n        [\"BANKER3_NOR\", \"PLAYER3_NOR\"],\n        // 添加更多的組合...\n      ];\n\n      // 檢查是否為有效的BetCode組合\n      return this.validPairs.some((pair) => {\n        return (\n          (pair[0] === betCode1 && pair[1] === betCode2) ||\n          (pair[0] === betCode2 && pair[1] === betCode1)\n        );\n      });\n    },\n\n    // 匯率換算\n    convertCurrency(amount, currencyCode) {\n      // 檢查是否有對應的匯率\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.exchangeRates.hasOwnProperty(currencyCode)) {\n        // 使用匯率換算金額\n        return (amount * this.exchangeRates[currencyCode]).toFixed(2);\n      } else {\n        // 如果沒有對應的匯率，返回原始金額\n        return amount;\n      }\n    },\n\n    // 時間轉換\n    formatTime(time) {\n      const options = {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: false,\n        timeZone: \"Asia/Taipei\",\n      };\n\n      return new Date(time).toLocaleString(\"zh-TW\", options);\n    },\n\n    exportCSV() {\n      // 获取 organizedData 中所有的 roundCode\n      const roundCodes = Object.keys(this.organizedData);\n\n      // 创建CSV内容\n      let csvContent =\n        \"牌局號,投注時間,用戶名,貨幣,下注金額,轉換後金額(USD),下注類型,IP,代理\\n\";\n\n      // 遍历 organizedData 中的数据\n      roundCodes.forEach((roundCode) => {\n        const roundData = this.organizedData[roundCode];\n\n        roundData.forEach((bet) => {\n          // 添加每一行的数据\n          csvContent += `${roundCode},${bet.betTime},${bet.userCode},${bet.currencyCode},${bet.betAmt},${bet.ConbetAmt},${bet.betCode},${bet.sessionIp},${bet.agentCode}\\n`;\n        });\n      });\n\n      // 创建一个Blob对象，用于下载CSV\n      const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n\n      // 使用URL.createObjectURL创建URL并生成下载链接\n      const link = document.createElement(\"a\");\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", \"對投查詢.csv\");\n\n        // 立即触发点击以模拟用户操作\n        link.style.visibility = \"hidden\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    },\n\n    setTimeRange(range) {\n      const now = new Date();\n      switch (range) {\n        case \"today\":\n          this.timeFrom = this.formatDate(\n            new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0)\n          );\n          this.timeTo = this.formatDate(\n            new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0)\n          );\n          break;\n        case \"yesterday\":\n          // eslint-disable-next-line no-case-declarations\n          const yesterday = new Date(now);\n          yesterday.setDate(now.getDate() - 1);\n          this.timeFrom = this.formatDate(\n            new Date(\n              yesterday.getFullYear(),\n              yesterday.getMonth(),\n              yesterday.getDate(),\n              0,\n              0\n            )\n          );\n          this.timeTo = this.formatDate(\n            new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0)\n          );\n          break;\n        case \"last3days\":\n          // eslint-disable-next-line no-case-declarations\n          const threeDaysAgo = new Date(now);\n          threeDaysAgo.setDate(now.getDate() - 2); // 最近三天包括今天，所以减2\n          this.timeFrom = this.formatDate(\n            new Date(\n              threeDaysAgo.getFullYear(),\n              threeDaysAgo.getMonth(),\n              threeDaysAgo.getDate(),\n              0,\n              0\n            )\n          );\n          this.timeTo = this.formatDate(\n            new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0)\n          );\n          break;\n        case \"thisWeek\":\n          // eslint-disable-next-line no-case-declarations\n          const thisMonday = new Date(now);\n          thisMonday.setDate(\n            now.getDate() - now.getDay() + (now.getDay() === 0 ? -6 : 1)\n          );\n          this.timeFrom = this.formatDate(\n            new Date(\n              thisMonday.getFullYear(),\n              thisMonday.getMonth(),\n              thisMonday.getDate(),\n              0,\n              0\n            )\n          );\n          this.timeTo = this.formatDate(\n            new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0)\n          );\n          break;\n        case \"lastWeek\":\n          // eslint-disable-next-line no-case-declarations\n          const lastMonday = new Date(now);\n          lastMonday.setDate(now.getDate() - now.getDay() - 6);\n          // eslint-disable-next-line no-case-declarations\n          const lastSunday = new Date(now);\n          lastSunday.setDate(now.getDate() - now.getDay());\n          this.timeFrom = this.formatDate(\n            new Date(\n              lastMonday.getFullYear(),\n              lastMonday.getMonth(),\n              lastMonday.getDate(),\n              0,\n              0\n            )\n          );\n          this.timeTo = this.formatDate(\n            new Date(\n              lastSunday.getFullYear(),\n              lastSunday.getMonth(),\n              lastSunday.getDate() + 1,\n              0,\n              0\n            )\n          );\n          break;\n        case \"thisMonth\":\n          // eslint-disable-next-line no-case-declarations\n          const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n          this.timeFrom = this.formatDate(\n            new Date(\n              firstDayOfMonth.getFullYear(),\n              firstDayOfMonth.getMonth(),\n              firstDayOfMonth.getDate(),\n              0,\n              0\n            )\n          );\n          this.timeTo = this.formatDate(\n            new Date(\n              now.getFullYear(),\n              now.getMonth(),\n              new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate() + 1,\n              0,\n              0\n            )\n          );\n          break;\n      }\n    },\n    // 格式化日期为适合datetime-local的格式\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n      const day = date.getDate().toString().padStart(2, \"0\");\n      const hours = date.getHours().toString().padStart(2, \"0\");\n      const minutes = date.getMinutes().toString().padStart(2, \"0\");\n      return `${year}-${month}-${day}T${hours}:${minutes}`;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.custom-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.custom-table th,\n.custom-table td {\n  border: 1px solid #dfd8d8;\n  padding: 8px;\n  text-align: left;\n  text-align: center;\n}\n\n.custom-table ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.custom-table th {\n  background-color: #e8f0e2;\n  width: 300px;\n}\n.custom-table tbody tr:nth-child(odd) {\n  background-color: #e9f0f1;\n}\n\n.custom-table tbody tr:nth-child(even) {\n  background-color: #e7eced;\n}\n\n.custom-table tbody tr:hover {\n  background-color: #f2f2f2;\n}\n\n.custom-label {\n  color: #000000;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.custom-input {\n  padding: 8px;\n  border: 1px solid #336699;\n  border-radius: 5px;\n  font-size: 14px;\n  margin-right: 1%;\n}\n\n.custom-time {\n  background-color: #d2f7f1;\n  color: #000000;\n  padding: 8px 12px;\n  border: none;\n  margin: 3px;\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer; /* 指針樣式 */\n}\n\n.custom-time:hover {\n  background-color: rgb(204, 238, 189);\n  color: white;\n  cursor: pointer;\n}\n\n.custom-button {\n  background-color: #ddebd1;\n  color: #000000;\n  padding: 8px 12px;\n  margin: 3px;\n\n  border: none;\n  border-radius: 10px;\n  font-size: 16px;\n  font-weight: bold;\n  cursor: pointer; /* 指針樣式 */\n}\n\n.custom-button:hover {\n  background-color: #a6c0e8;\n  color: white;\n  cursor: pointer;\n}\n\n.sub-title {\n  color: #766f6f;\n  font-size: 16px;\n  margin-top: 1px;\n}\n\n.loading-spinner {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: rgba(255, 255, 255, 0.8);\n  padding: 30px;\n  border-radius: 5px;\n}\n\n.highlight {\n  color: rgb(75, 179, 71);\n  font-weight: bold;\n  font-size: 20px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}